
    public void DAAT_disk(ArrayList<String> queryTerms, Lexicon lexicon, ArrayList<Document> documents, int K, String mode) {
        queryResults.clear();
        //create postingListIterator
        PostingListIterator postingListIterator = new PostingListIterator();
        ArrayList<Integer> counter = new ArrayList<>();

        // populate postingListIterator with offset and df for each term in query
        // TODO
        for (String term : queryTerms) {
            if (lexicon.getLexicon().containsKey(term)) {
                postingListIterator.addOffset(lexicon.getLexiconElem(term).getOffset());
                postingListIterator.addDf(lexicon.getLexiconElem(term).getDf());
                counter.add(lexicon.getLexiconElem(term).getDf());
            }
        }
        if (postingListIterator.getCursor().size() == 0)
            return; // if no terms in query are in lexicon means that there are no results
        postingListIterator.openList(); // there are results so open the postingList

        int next_docId;

        do {
            ArrayList<Double> scores = new ArrayList<>();
            //get next docId
            next_docId = getNextDocId(postingListIterator, counter);
            if (next_docId == Integer.MAX_VALUE)
                break;
            double document_score = 0;
            int term_counter = 0;

            for (int i = 0; i < postingListIterator.getCursor().size(); i++) {
                int docId = postingListIterator.getDocId(i);
                if (docId == next_docId) {
                    int tf = postingListIterator.getFreq(i);
                    postingListIterator.next(i);
                    counter.set(i, counter.get(i) - 1);
                    scores.add(tfidf(tf, postingListIterator.getDf().get(i)));
                    term_counter++;
                }
            }

            if (mode.equals("conjunctive") && term_counter != queryTerms.size())
                scores.clear();

            //sum all the value of scores
            for (double score : scores) {
                document_score += score;
            }
            if (document_score > 0) {
                // get document
                Document document = documents.get(next_docId);
                // get document pid
                String pid = document.getDocNo();
                // add pid to results
                queryResults.add(new QueryResult(pid, document_score));
            }
        } while (next_docId != Integer.MAX_VALUE);

        postingListIterator.closeList();
        Collections.sort(queryResults);
        if (queryResults.size() > K) {
            queryResults = new ArrayList<>(queryResults.subList(0, K));
        }
    }